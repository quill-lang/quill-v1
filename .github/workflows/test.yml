name: Run tests and produce release

on: [push]

jobs:
  version-gen:
    runs-on: ubuntu-latest
    steps:
      - name: Generate version
        run: |
          date --rfc-3339=seconds > version.txt
          cat version.txt

      - name: Upload version
        uses: actions/upload-artifact@v2
        with:
          name: version
          path: version.txt

  test:
    runs-on: ${{ matrix.os }}
    needs: version-gen
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install LLVM
        uses: thirdsgames/install-llvm-action@v1
        with:
          llvm-version: 11
          env-var: LLVM_SYS_110_PREFIX

      - name: Install latest nightly rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: clippy

      # Cache is disabled since we're using the nightly compiler. It will probably just slow everything down.
      # - name: Cache compiler artifacts
      #   uses: Swatinem/rust-cache@v1

      - name: Build project
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Download compiler dependencies
        run: cargo run --release --bin download_compiler_deps

      - name: Check warnings
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --release -- -Dwarnings

      - name: Run test suite
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --no-fail-fast

      # We also build the rustdoc in this action so that we avoid recompilation.

      - name: Build rustdoc
        if: matrix.os == 'ubuntu-latest'
        run: cargo doc --workspace --no-deps

      - name: Create index.html
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "<!DOCTYPE html>" >> target/doc/index.html
          echo "<html>" >> target/doc/index.html
          echo "<head>" >> target/doc/index.html
          echo "<meta http-equiv="refresh" content=\"0; URL=quill/index.html\" />" >> target/doc/index.html
          echo "</head>" >> target/doc/index.html
          echo "<body>" >> target/doc/index.html
          echo "<p>Redirecting to <a href=\"quill/index.html\">quill/index.html</a>...</p>" >> target/doc/index.html
          echo "</body>" >> target/doc/index.html
          echo "</html>" >> target/doc/index.html

      - name: Deploy rustdoc
        if: matrix.os == 'ubuntu-latest'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          force_orphan: true

      # Now create a release and upload the compiler.

      - name: Fetch version
        uses: actions/download-artifact@v2
        with:
          name: version
          path: target/release

      - name: Create compiler tarballs (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/release
          tar -czvf ${{ matrix.os }}_quill.tar.gz quill.exe version.txt
          tar -czvf ${{ matrix.os }}_quillc.tar.gz quillc.exe version.txt
          tar -czvf ${{ matrix.os }}_quill_lsp.tar.gz quill_lsp.exe version.txt

      - name: Create compiler tarballs (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/release
          tar -czvf ${{ matrix.os }}_quill.tar.gz quill version.txt
          tar -czvf ${{ matrix.os }}_quillc.tar.gz quillc version.txt
          tar -czvf ${{ matrix.os }}_quill_lsp.tar.gz quill_lsp version.txt

      - name: Upload compiler tarballs
        uses: actions/upload-artifact@v2
        with:
          name: quill-${{ matrix.os }}
          path: |
            target/release/${{ matrix.os }}_quill.tar.gz
            target/release/${{ matrix.os }}_quillc.tar.gz
            target/release/${{ matrix.os }}_quill_lsp.tar.gz

      # We also want to re-upload compiler dependencies to ensure a fixed version is used.

      - name: Create compiler deps tarballs
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd compiler-deps
          tar -czvf dev-linux.tar.gz dev-linux
          tar -czvf dev-win.tar.gz dev-win
          tar -czvf target-linux.tar.gz target-linux
          tar -czvf target-win.tar.gz target-win

      - name: Upload compiler deps tarballs
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: compiler-deps
          path: |
            compiler-deps/*.tar.gz

  create-release:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2

      - name: Create GitHub release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          automatic_release_tag: latest
          files: |
            quill-*/*
            compiler-deps/*
            version/version.txt
